import os
from autogen import AssistantAgent, UserProxyAgent
import google.generativeai as genai
import autogen

# Configure the Google API
genai.configure(api_key="YOUR_GOOGLE_API_KEY")
llm_config = {"model": "gemini-1.5-flash", "api_key": "AIzaSyAHNdDCfn5_lAqtw0QUdnmbhMFc6izHRJk", "api_type": "google"}




# Define the Assistant Agent
assistant = AssistantAgent(
    name="assistant",
    system_message="""You are responsible for generating the code based on the objective provided by the pm and user_proxy. Always ask the user_proxy for input and approval before proceeding. After generating code, user will approve and run the code""",
    llm_config=llm_config, 
)

# Define the PM Agent
pm = AssistantAgent(
    name="pm",
    system_message="""You will break down the initial idea into a well-scoped requirement for the assistant. Keep it short and focused. If you need any more information feel free to ask the proxy agent. Only engage in project break down.Do not engage in debugging and coding process.""",
    llm_config=llm_config
)

# Define the User Proxy Agent
user_proxy = UserProxyAgent(
    name="user_proxy",
    system_message="""You are a human admin who will provide the initial idea, give approval, provide more information, and run the code generated by the assistant. Do not talk twice in a row, pass on to the assistant""",
    code_execution_config={"last_n_messages": 2, "work_dir": "coding"},
    human_input_mode="ALWAYS"
)

allowed_transitions = {
    user_proxy: [pm, assistant],
    pm :[assistant, user_proxy], 
    assistant: [user_proxy], 
}

# Create the group chat
groupchat = autogen.GroupChat(agents=[user_proxy, assistant, pm], 
                              allowed_or_disallowed_speaker_transitions=allowed_transitions,
                              speaker_transitions_type="allowed",
                              messages=[],
                              send_introductions=True)

manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config)

# Start the chat and interaction cycle
user_proxy.initiate_chat(
    manager,
    message="Help perform log sanitation, replace sensitive value with a unique value and provide a mapping table.",
    summary_method="reflection_with_llm",
)



